generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Checklist_item {
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar
}

model Department {
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar
  description String   @db.VarChar
}

model Errortracking {
  created_at     DateTime  @default(now()) @db.Timestamp(6)
  updated_at     DateTime  @default(now()) @db.Timestamp(6)
  id             Int       @id @default(autoincrement())
  error_type     String    @db.VarChar
  error_category String
  task_id        Int
  supplier_id    Int?
  employee_id    Int
  position       String
  description    String    @db.VarChar
  user           User      @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  supplier       Supplier? @relation(fields: [supplier_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  task           Task      @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  files          File[]
}

model Exit_checklist {
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar
  task_id     Int
  employee_id Int
  position    String   @db.VarChar
  date        DateTime @db.Timestamp(6)
  user        User     @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  task        Task     @relation(fields: [task_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Product {
  created_at       DateTime          @default(now()) @db.Timestamp(6)
  updated_at       DateTime          @default(now()) @db.Timestamp(6)
  id               Int               @id @default(autoincrement())
  name             String            @db.VarChar
  inventoryId      Int               @unique @default(autoincrement())
  type             String?           @db.VarChar
  description      String?           @default("") @db.VarChar
  supplier         String?           @default("") @db.VarChar
  unit_price       Float
  unit             String?
  length           Float?
  total_price      Float?
  width            Float?
  height           Float?
  quantity         Float
  supplierId       Int?
  categoryId       Int?
  Action           Action[]
  product_category Product_category? @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  supplierInfo     Supplier?         @relation(fields: [supplierId], references: [id])
}

model SellProduct {
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  id         Int      @id @default(autoincrement())
  name       String
  type       String
  active     Boolean  @default(true)
  Task       Task[]
}

model Kanban {
  id         Int            @id @default(autoincrement())
  title      String
  identifier String         @unique
  columns    KanbanColumn[]
  Task       Task[]
  color      String?
}

model KanbanColumn {
  id         Int     @id @default(autoincrement())
  title      String
  identifier String  @unique
  position   Int
  kanbanId   Int
  kanban     Kanban  @relation(fields: [kanbanId], references: [id])
  tasks      Task[]
  icon       String?
}

model Product_category {
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar
  description String    @db.VarChar
  inventory   Product[]
}

model Supplier {
  created_at     DateTime        @default(now()) @db.Timestamp(6)
  updated_at     DateTime        @default(now()) @db.Timestamp(6)
  id             Int             @id @default(autoincrement())
  name           String          @db.VarChar
  address        String?
  cap            Int?
  location       String?
  website        String?
  email          String?
  phone          String?
  contact        String?
  description    String          @db.VarChar
  supplier_image String?         @db.VarChar
  category       String?         @db.VarChar
  short_name     String?
  errortracking  Errortracking[]
  Product        Product[]
  taskSuppliers  TaskSupplier[]
}

model QualityControl {
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  id          Int       @id @default(autoincrement())
  position_nr String
  passed      QC_Status @default(NOT_DONE)
  taskId      Int
  userId      Int
  items       Qc_item[]
  task        Task      @relation(fields: [taskId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model Qc_item {
  created_at       DateTime        @default(now()) @db.Timestamp(6)
  updated_at       DateTime        @default(now()) @db.Timestamp(6)
  id               Int             @id @default(autoincrement())
  name             String          @db.VarChar
  qualityControlId Int?
  checked          Boolean         @default(false)
  QualityControl   QualityControl? @relation(fields: [qualityControlId], references: [id], onDelete: Cascade)
}

model PackingControl {
  created_at DateTime      @default(now()) @db.Timestamp(6)
  updated_at DateTime      @default(now()) @db.Timestamp(6)
  id         Int           @id @default(autoincrement())
  passed     QC_Status     @default(NOT_DONE)
  taskId     Int
  userId     Int
  task       Task          @relation(fields: [taskId], references: [id])
  user       User          @relation(fields: [userId], references: [id])
  items      PackingItem[]
}

model PackingItem {
  id               Int            @id @default(autoincrement())
  name             String
  number           Int?
  package_quantity Int?
  packingControlId Int
  packingControl   PackingControl @relation(fields: [packingControlId], references: [id], onDelete: Cascade)
}

model QcMasterItem {
  id   Int    @id @default(autoincrement())
  name String
}

model PackingMasterItem {
  id   Int    @id @default(autoincrement())
  name String
}

model Task {
  created_at      DateTime         @default(now()) @db.Timestamp(6)
  updated_at      DateTime         @default(now()) @db.Timestamp(6)
  id              Int              @id @default(autoincrement())
  title           String?          @db.VarChar
  column_id       Int?
  column_position Int?
  unique_code     String?          @unique
  archived        Boolean          @default(false)
  locked          Boolean          @default(false)
  status          String?
  deliveryDate    DateTime?
  kanbanColumnId  Int?
  clientId        Int?
  kanbanId        Int?
  other           String?
  sellPrice       Float?
  material        Boolean          @default(false)
  percentStatus   Int?             @default(0)
  positions       String[]
  sellProductId   Int?
  userId          Int?
  ferramenta      Boolean          @default(false)
  metalli         Boolean          @default(false)
  legno           Boolean          @default(false)
  vernice         Boolean          @default(false)
  altro           Boolean          @default(false)
  name            String?          @db.VarChar
  stoccato        Boolean?         @default(false)
  stoccaggiodate  DateTime?        @db.Timestamp(6)
  Action          Action[]
  errortracking   Errortracking[]
  exit_checklist  Exit_checklist[]
  files           File[]
  PackingControl  PackingControl[]
  QualityControl  QualityControl[]
  client          Client?          @relation(fields: [clientId], references: [id])
  column          KanbanColumn?    @relation(fields: [kanbanColumnId], references: [id])
  kanban          Kanban?          @relation(fields: [kanbanId], references: [id])
  sellProduct     SellProduct?     @relation(fields: [sellProductId], references: [id])
  User            User?            @relation(fields: [userId], references: [id])
  timetracking    Timetracking[]
  suppliers       TaskSupplier[]
  TaskHistory     TaskHistory[]
}

model TaskSupplier {
  id           Int       @id @default(autoincrement())
  taskId       Int
  task         Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  supplierId   Int
  supplier     Supplier  @relation(fields: [supplierId], references: [id])
  deliveryDate DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([taskId, supplierId])
}

model Timetracking {
  created_at       DateTime  @default(now()) @db.Timestamp(6)
  updated_at       DateTime  @default(now()) @db.Timestamp(6)
  id               Int       @id @default(autoincrement())
  description      String?   @db.VarChar
  description_type String    @default("EXTERNAL") @db.VarChar
  task_id          Int?
  employee_id      Int?
  use_cnc          Boolean
  endTime          DateTime?
  startTime        DateTime?
  totalTime        Float
  hours            Int?
  minutes          Int?
  user             User?     @relation(fields: [employee_id], references: [id])
  task             Task?     @relation(fields: [task_id], references: [id])
  roles            Roles[]   @relation("RolesToTimetracking")
}

model Client {
  id                  Int             @id @default(autoincrement())
  clientType          ClientType      @default(BUSINESS)
  clientLanguage      String?
  individualTitle     String?
  individualFirstName String?
  individualLastName  String?
  businessName        String?
  phone               String?
  email               String?
  countryCode         String?
  zipCode             Int?
  city                String?
  address             String?
  code                String
  latitude            Float?
  longitude           Float?
  Action              Action[]
  Task                Task[]
  ClientAddress       ClientAddress[]
}

model ClientAddress {
  id           Int               @id @default(autoincrement())
  countryCode  String?
  name         String?
  lastName     String?
  mobile       String?
  phone        String?
  email        String?
  zipCode      Int?
  city         String?
  address      String?
  addressExtra String?
  typeDetail   String?
  latitude     Float?
  longitude    Float?
  type         ClientAddressType @default(CONSTRUCTION_SITE)
  clientId     Int?
  Client       Client?           @relation(fields: [clientId], references: [id])
}

model User {
  id             Int              @id @default(autoincrement())
  email          String
  authId         String?          @unique
  given_name     String?
  family_name    String?
  initials       String?
  picture        String?
  color          String?
  enabled        Boolean          @default(true)
  Action         Action[]
  errortracking  Errortracking[]
  exit_checklist Exit_checklist[]
  PackingControl PackingControl[]
  QualityControl QualityControl[]
  Task           Task[]
  timetracking   Timetracking[]
  roles          Roles[]          @relation("RolesToUser")
}

model Action {
  id         Int      @id @default(autoincrement())
  type       String
  data       Json
  supplierId Int?
  createdAt  DateTime @default(now())
  userId     Int
  taskId     Int?
  clientId   Int?
  productId  Int?
  Client     Client?  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  Product    Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  Task       Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model File {
  id              Int            @id @default(autoincrement())
  name            String
  url             String
  cloudinaryId    String         @unique
  taskId          Int?
  errortrackingId Int?
  Errortracking   Errortracking? @relation(fields: [errortrackingId], references: [id])
  Task            Task?          @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Roles {
  id           Int            @id @unique @default(autoincrement())
  name         String         @unique
  Timetracking Timetracking[] @relation("RolesToTimetracking")
  user         User[]         @relation("RolesToUser")
}

model TaskHistory {
  id        Int      @id @default(autoincrement())
  taskId    Int
  snapshot  Json
  createdAt DateTime @default(now())
  Task      Task     @relation(fields: [taskId], references: [id])
}

enum QC_Status {
  NOT_DONE
  PARTIALLY_DONE
  DONE
}

enum ClientAddressType {
  CONSTRUCTION_SITE
  OTHER
}

enum ClientType {
  INDIVIDUAL
  BUSINESS
}
